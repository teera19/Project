package com.example.server_management.service;

import com.example.server_management.models.*;
import com.example.server_management.repository.AuctionRepository;
import com.example.server_management.repository.BidHistoryRepository;
import com.example.server_management.repository.BidRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.util.Comparator;
import java.util.List;

@Service
public class AuctionService {

    @Autowired
    private AuctionRepository auctionRepository;

    @Autowired
    private BidRepository bidRepository;
    @Autowired
    private BidHistoryRepository bidHistoryRepository;  // ‚úÖ ‡πÉ‡∏ä‡πâ Repository ‡∏ó‡∏µ‡πà extends JpaRepository


    public List<Auction> getAllAuctions() {
        return auctionRepository.findByOrderByAuctionIdDesc();
    }

    public Auction getAuctionById(int auctionId) {
        return auctionRepository.findById(auctionId)
                .orElseThrow(() -> new RuntimeException("Auction not found with ID: " + auctionId));
    }

    public Auction addAuction(Auction auction) {
        System.out.println("   Saving Auction...");
        System.out.println("   Product Name: " + auction.getProductName());
        System.out.println("   Starting Price: " + auction.getStartingPrice());
        System.out.println("   Max Bid Price: " + auction.getMaxBidPrice());
        System.out.println("   Owner User Name: " + auction.getOwnerUserName());
        System.out.println("   Start Time: " + auction.getStartTime());
        System.out.println("   End Time: " + auction.getEndTime());

        return auctionRepository.save(auction);
    }

    public Bid addBid(int auctionId, User user, double bidAmount) {
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•
        Auction auction = auctionRepository.findById(auctionId)
                .orElseThrow(() -> new IllegalArgumentException("Auction not found"));

        // ‚úÖ Debugging: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å MySQL (Raw Data)
        System.out.println("üìå Raw Auction StartTime from DB: " + auction.getStartTime());
        System.out.println("üìå Raw Auction EndTime from DB: " + auction.getEndTime());

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤ Hibernate ‡∏≠‡πà‡∏≤‡∏ô‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏ã‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏´‡∏ô
        ZonedDateTime now = ZonedDateTime.now(ZoneId.of("Asia/Bangkok"));
        LocalDateTime rawStart = auction.getStartTime();
        LocalDateTime rawEnd = auction.getEndTime();

        // üî• Debug: ‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤ Hibernate ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏ã‡∏ô‡∏≠‡∏∞‡πÑ‡∏£
        System.out.println("üî• Hibernate Read StartTime: " + rawStart);
        System.out.println("üî• Hibernate Read EndTime: " + rawEnd);

        // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Asia/Bangkok
        ZonedDateTime auctionStart = rawStart.atZone(ZoneId.systemDefault()).withZoneSameInstant(ZoneId.of("Asia/Bangkok"));
        ZonedDateTime auctionEnd = rawEnd.atZone(ZoneId.systemDefault()).withZoneSameInstant(ZoneId.of("Asia/Bangkok"));

        System.out.println("‚è∞ Current Server Time: " + now);
        System.out.println("üéØ Converted Auction Start Time: " + auctionStart);
        System.out.println("üèÅ Converted Auction End Time: " + auctionEnd);

        if (now.isBefore(auctionStart)) {
            System.out.println("üö® Auction has not started yet! (Check timezone)");
            throw new IllegalArgumentException("Auction has not started yet.");
        }

        if (now.isAfter(auctionEnd)) {
            System.out.println("üö® Auction has already ended!");
            throw new IllegalArgumentException("Auction has already ended.");
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ö‡∏¥‡∏î
        if (bidAmount < auction.getStartingPrice()) {
            throw new IllegalArgumentException("Bid amount must be at least the starting price.");
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏¥‡∏î‡πÉ‡∏´‡∏°‡πà
        Bid bid = new Bid();
        bid.setAuction(auction);
        bid.setUser(user);
        bid.setBidAmount(bidAmount);
        bidRepository.save(bid);

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (maxBidPrice)
        if (bidAmount >= auction.getMaxBidPrice()) {
            // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•
            auction.setStatus(AuctionStatus.COMPLETED);
            auction.setEndTime(LocalDateTime.now());
            auctionRepository.save(auction);
        }

        return bid;
    }



    @Transactional
    public void determineAuctionWinner(Auction auction) {
        List<Bid> bids = bidRepository.findByAuction(auction);
        if (bids.isEmpty()) {
            auction.setStatus(AuctionStatus.ENDED);
            auctionRepository.save(auction);
            return;
        }

        // ‚úÖ ‡∏´‡∏≤‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
        Bid highestBid = bids.stream()
                .max(Comparator.comparingDouble(Bid::getBidAmount))
                .orElse(null);

        if (highestBid != null) {
            // ‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏´‡∏°‡πà
            bidHistoryRepository.deleteByAuction(auction);

            // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà
            closeAuctionWithWinner(auction, highestBid);
            auctionRepository.flush();
        }
    }




    @Transactional
    private void closeAuctionWithWinner(Auction auction, Bid highestBid) {
        auction.setWinner(highestBid.getUser());
        auction.setStatus(AuctionStatus.COMPLETED);

        System.out.println("üèÜ Closing auction: " + auction.getAuctionId());
        System.out.println("üéØ Winner: " + highestBid.getUser().getUserName());

        auctionRepository.save(auction);  // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞‡∏Å‡πà‡∏≠‡∏ô

        List<Bid> bids = bidRepository.findByAuction(auction);
        for (Bid bid : bids) {
            boolean isWinner = bid.getUser().equals(highestBid.getUser());

            System.out.println("üìú Saving BidHistory -> User: " + bid.getUser().getUserName() +
                    " | Amount: " + bid.getBidAmount() +
                    " | Winner: " + isWinner);

            BidHistory bidHistory = new BidHistory(
                    bid.getUser(), auction, bid.getBidAmount(),
                    bid.getBidTime() != null ? bid.getBidTime() : LocalDateTime.now(),  // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô bidTime ‡πÄ‡∏õ‡πá‡∏ô null
                    isWinner
            );

            bidHistoryRepository.save(bidHistory);
        }
    }






    @Transactional
    public void updateAuctionStatus(Auction auction) {
        try {
            auctionRepository.save(auction); // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            System.out.println(" Auction " + auction.getAuctionId() + " updated to " + auction.getStatus());
        } catch (Exception e) {
            e.printStackTrace();
            System.err.println(" Error updating auction status: " + e.getMessage());
        }
    }

    @Scheduled(fixedRate = 600000) // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏∏‡∏Å‡πÜ 10 ‡∏ô‡∏≤‡∏ó‡∏µ (600,000 ms)
    public void checkAuctionsForWinners() {
        List<Auction> auctions = auctionRepository.findAll();
        for (Auction auction : auctions) {
            determineAuctionWinner(auction);
        }
    }
    public List<Auction> getAuctionsByWinner(User winner) {
        return auctionRepository.findByWinner(winner);
    }
}