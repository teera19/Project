package com.example.server_management.service;

import com.example.server_management.dto.ResponseProduct;
import com.example.server_management.models.*;
import com.example.server_management.repository.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;


import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;


@Service
public class UserService {

    @Autowired
    private UserRepository userRepository;
    @Autowired
    private ProductRepository productRepository;
    @Autowired
    private CategoryRepository categoryRepository;
    @Autowired
    private MyshopRepository myShopRepository;
    @Autowired
    private ClothingDetailsRepository  clothingDetailsRepository;
    @Autowired
    private PhoneDetailsRepository phoneDetailsRepository;
    @Autowired
    private ShoesDetailsRepository shoesDetailsRepository;
    @Autowired
    private MoreRepository moreRepository;

    public User registerServiceMethod(User user) {
        System.out.println("Registering user: " + user.getUserName() + ", Email: " + user.getEmail());
        return userRepository.save(user);
    }


    public int countByUserName(String userName) {
        return userRepository.countByUserName(userName);
    }

    public User loginUser(String user_name) {
        return userRepository.findByUserName(user_name);
    }

    public MyShop createShopForUser(String userName, String title, String detail) {
        User user = userRepository.findByUserName(userName);
        if (user != null) {
            MyShop myShop = new MyShop();
            myShop.setTitle(title);
            myShop.setDetail(detail);
            myShop.setUser(user);

            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å MyShop ‡∏ú‡πà‡∏≤‡∏ô User ‡πÅ‡∏•‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ô
            user.setMyShop(myShop);
            userRepository.save(user);

            return myShop; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ MyShop ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
        }
        return null; // ‡∏´‡∏≤‡∏Å User ‡πÑ‡∏°‡πà‡∏û‡∏ö
    }


    public String userHasShop(String userName) {
        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
        User user = userRepository.findByUserName(userName);
        if (user == null) {
            return "User not found";
        }

        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        Optional<MyShop> shop = myShopRepository.findByUser(user);
        System.out.println("Shop: " + shop); // Log ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (shop.isPresent()) {
            return "User has a shop";
        } else {
            return "User does not have a shop";
        }
    }



    @Transactional
    public ResponseProduct addProductToShop(String shopTitle, String name, String description, double price,
                                            MultipartFile image, int categoryId, Map<String, String> details) throws IOException {
        System.out.println("üìå Checking categoryId: " + categoryId);
        System.out.println("üìå Checking shopTitle: " + shopTitle);
        System.out.println("üìå Checking details: " + details);

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ categoryId ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        if (categoryId <= 0) {
            throw new IllegalArgumentException("Invalid categoryId: " + categoryId);
        }

        // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
        Category category = categoryRepository.findById(categoryId)
                .orElseThrow(() -> new IllegalArgumentException("Category not found with ID: " + categoryId));

        // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤
        MyShop shop = myShopRepository.findByTitle(shopTitle);
        if (shop == null) {
            throw new IllegalArgumentException("Shop not found with title: " + shopTitle);
        }

        // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
        Product product = new Product();
        product.setName(name);
        product.setDescription(description);
        product.setPrice(price);
        product.setShop(shop);
        product.setCategory(category);

        // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ `productId`
        Product savedProduct = productRepository.save(product);
        System.out.println("‚úÖ Saved Product ID: " + savedProduct.getProductId());

        // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï `imageUrl`
        String imageUrl = saveImageToFile(image, savedProduct.getProductId());
        savedProduct.setImageUrl(imageUrl);

        // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏µ‡∏Å‡∏£‡∏≠‡∏ö ‡∏û‡∏£‡πâ‡∏≠‡∏° `imageUrl`
        productRepository.save(savedProduct);

        // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
        addProductDetails(savedProduct, categoryId, details);

        return new ResponseProduct(
                savedProduct.getProductId(),
                savedProduct.getName(),
                savedProduct.getDescription(),
                savedProduct.getPrice(),
                imageUrl, // ‚úÖ URL ‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                details // ‚úÖ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        );
    }

    /**
     * üìå ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
     */
    private void addProductDetails(Product product, int categoryId, Map<String, String> details) {
        switch (categoryId) {
            case 1: // ‚úÖ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤
                ClothingDetails clothingDetails = new ClothingDetails();
                clothingDetails.setProduct(product);
                clothingDetails.setHasStain(details.getOrDefault("has_stain", "‡πÑ‡∏°‡πà‡∏°‡∏µ")); // ‚úÖ ‡πÉ‡∏ä‡πâ String "‡∏°‡∏µ"/"‡πÑ‡∏°‡πà‡∏°‡∏µ"
                clothingDetails.setTearLocation(details.getOrDefault("tear_location", "Unknown"));
                clothingDetails.setRepairCount(parseIntOrDefault(details.get("repair_count"), 0));
                clothingDetailsRepository.save(clothingDetails);
                break;

            case 2: // ‚úÖ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå
                PhoneDetails phoneDetails = new PhoneDetails();
                phoneDetails.setProduct(product);
                phoneDetails.setBasicFunctionalityStatus("yes".equalsIgnoreCase(details.get("basic_functionality_status")));
                phoneDetails.setBatteryStatus(details.getOrDefault("battery_status", "Unknown"));
                phoneDetails.setNonFunctionalParts(details.getOrDefault("nonfunctional_parts", "None"));
                phoneDetails.setScratchCount(parseIntOrDefault(details.get("scratch_count"), 0));
                phoneDetailsRepository.save(phoneDetails);
                break;

            case 3: // ‚úÖ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤
                ShoesDetails shoesDetails = new ShoesDetails();
                shoesDetails.setProduct(product);
                shoesDetails.setHasBrandLogo("yes".equalsIgnoreCase(details.get("hasbrand_logo")));
                shoesDetails.setTearLocation(details.getOrDefault("tear_location", "Unknown"));
                shoesDetails.setRepairCount(parseIntOrDefault(details.get("repair_count"), 0));
                shoesDetailsRepository.save(shoesDetails);
                break;

            case 4: // ‚úÖ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà `More`
                More more = new More();
                more.setProduct(product);
                more.setFlawedPoint(details.getOrDefault("flawed_point", "Unknown"));
                moreRepository.save(more);
                break;

            default:
                System.out.println("‚ö†Ô∏è No additional details required for categoryId: " + categoryId);
        }
    }


    /**
     * üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á `String` ‡πÄ‡∏õ‡πá‡∏ô `int`
     */
    private int parseIntOrDefault(String value, int defaultValue) {
        try {
            return Integer.parseInt(value);
        } catch (NumberFormatException | NullPointerException e) {
            return defaultValue;
        }
    }

    private boolean parseBooleanOrDefault(String value, boolean defaultValue) {
        if (value == null || value.trim().isEmpty()) {
            return defaultValue;
        }

        // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Boolean ‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ
        value = value.trim().toLowerCase(); // ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        return value.equals("1") || value.equals("true") || value.equals("‡∏°‡∏µ")|| value.equals("have");
    }


    /**
     * ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏¢‡∏Å `,` ‡πÄ‡∏õ‡πá‡∏ô `List<String>`
     */
    private List<String> parseListOrDefault(String value, String defaultValue) {
        if (value == null || value.trim().isEmpty()) {
            return List.of(defaultValue);
        }
        return Arrays.stream(value.split(","))
                .map(String::trim)
                .filter(s -> !s.isEmpty())
                .collect(Collectors.toList());
    }



    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå
    private String saveImageToFile(MultipartFile image, int productId) throws IOException {
        if (image.isEmpty()) {
            throw new IOException("‚ùå No image uploaded");
        }

        // ‚úÖ ‡πÉ‡∏ä‡πâ `/tmp/images/`
        File uploadDir = new File("/tmp/images/");
        if (!uploadDir.exists()) {
            if (!uploadDir.mkdirs()) {
                throw new IOException("‚ùå Failed to create directory: " + uploadDir.getAbsolutePath());
            }
        }

        String fileName = productId + ".jpg";
        File savedFile = new File(uploadDir, fileName);
        image.transferTo(savedFile);

        return "https://project-production-f4db.up.railway.app/images/" + fileName;
    }


    public List<Category> getAllCategories() {
        return categoryRepository.findAll();
    }

    public Product getProductById(int productId) {
        return productRepository.findById(productId).orElse(null);
    }
    @Transactional
    public Product editProduct(int productId, String shopTitle, String name, String description, double price, byte[] imageBytes, int categoryId) {
        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å productId
        Product product = productRepository.findById(productId)
                .orElseThrow(() -> new RuntimeException("Product not found"));

        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Shop
        MyShop shop = myShopRepository.findByTitle(shopTitle);
        if (shop == null) {
            throw new RuntimeException("Shop not found");
        }


        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Category
        Category category = categoryRepository.findById(categoryId)
                .orElseThrow(() -> new RuntimeException("Category not found"));

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        product.setName(name);
        product.setDescription(description);
        product.setPrice(price);
        product.setShop(shop);
        product.setCategory(category);

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
        if (imageBytes != null) {
            // ‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î‡∏†‡∏≤‡∏û‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
            saveCompressedImage(imageBytes, product.getProductId());
        }

        return productRepository.save(product);
    }
    public Product findProductById(int productId) {
        return productRepository.findById(productId).orElse(null);
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ category_id
    public Category findCategoryById(int categoryId) {
        return categoryRepository.findById(categoryId).orElse(null);

    }

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    public void saveProduct(Product product) {
        productRepository.save(product);
    }
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ClothingDetails ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ productId
    public ClothingDetails findClothingDetailsByProductId(int productId) {
        Product product = productRepository.findById(productId).orElse(null);
        if (product == null) return null;
        return clothingDetailsRepository.findByProduct(product).orElse(null);
    }

    public PhoneDetails findPhoneDetailsByProductId(int productId) {
        Product product = productRepository.findById(productId).orElse(null);
        if (product == null) return null;
        return phoneDetailsRepository.findByProduct(product).orElse(null);
    }

    public ShoesDetails findShoesDetailsByProductId(int productId) {
        Product product = productRepository.findById(productId).orElse(null);
        if (product == null) return null;
        return shoesDetailsRepository.findByProduct(product).orElse(null);
    }



    public void saveClothingDetails(ClothingDetails clothingDetails) {
        clothingDetailsRepository.save(clothingDetails);
    }

    public void savePhoneDetails(PhoneDetails phoneDetails) {
        phoneDetailsRepository.save(phoneDetails);
    }

    public void saveShoesDetails(ShoesDetails shoesDetails) {
        shoesDetailsRepository.save(shoesDetails);
    }


    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û
    public void saveCompressedImage(byte[] imageBytes, int productId) {
        try {
            BufferedImage originalImage = ImageIO.read(new ByteArrayInputStream(imageBytes));
            if (originalImage == null) {
                throw new IOException("‚ùå Cannot read image data.");
            }

            // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå `/tmp/images/`
            File uploadDir = new File("/tmp/images/");
            if (!uploadDir.exists() && !uploadDir.mkdirs()) {
                throw new IOException("‚ùå Failed to create directory: " + uploadDir.getAbsolutePath());
            }

            // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô PNG ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î
            File outputFile = new File(uploadDir, productId + ".png");
            ImageIO.write(originalImage, "png", outputFile);

            System.out.println("‚úÖ Image saved successfully: " + outputFile.getAbsolutePath());

        } catch (IOException e) {
            throw new RuntimeException("‚ùå Failed to save image: " + e.getMessage());
        }
    }




    public List<Product> getAllProducts() {
        return productRepository.findAll();
    }


    @Transactional
    public List<Product> getMyProducts(String userName) {
        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ User ‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠
        User user = userRepository.findByUserName(userName);
        if (user == null) {
            throw new IllegalArgumentException("User not found with username: " + userName);
        }

        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ MyShop ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö User
        MyShop shop = user.getMyShop();
        if (shop == null) {
            throw new IllegalArgumentException("No shop associated with this user.");
        }

        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Products ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö MyShop
        List<Product> products = productRepository.findByShop(shop);
        return products;
    }
    public List<String> findProductNamesByQuery(String query) {
        List<Product> products = productRepository.findByNameContainingIgnoreCase(query);
        return products.stream()
                .map(Product::getName) // ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                .limit(10) // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                .collect(Collectors.toList());
    }
    public List<Product> searchProductsByName(String query) {
        return productRepository.findByNameContainingIgnoreCase(query);
    }
    public MyShop findShopByProductId(int productId) {
        Product product = productRepository.findById(productId).orElse(null);
        if (product != null && product.getShop() != null) {
            return myShopRepository.findById(product.getShop().getMyShopId()).orElse(null);
        }
        return null;
    }

    public void deleteProductById(int productId) {
        productRepository.deleteById(productId);
    }

}
